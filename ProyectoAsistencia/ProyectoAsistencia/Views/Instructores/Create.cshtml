@model ClassLibrary1.Instructores

@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
    <div class="container">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Crear Instructor</h4>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="form-group">
                        @Html.LabelFor(model => model.nombre, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.nombre, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.nombre, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.apellido, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.apellido, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.apellido, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.imagen, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <style>
                                .Urlimagen {
                                }
                            </style>
                            @Html.HiddenFor(model => model.imagen, new { htmlAttributes = new { @class = "form-control" } })
                            <input type="file" id="imagenn" name="archivo" accept="image/*" />
                            <img id="vistaPreviaImagen" alt="Vista previa de la imagen" style="max-width: 100%; max-height: 200px; margin-top: 10px; display: none;">
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.correo_electronico, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.correo_electronico, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.correo_electronico, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.contraseña, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.contraseña, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.contraseña, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.numero_documento, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.numero_documento, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.numero_documento, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.tipo_documento, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.tipo_documento, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.tipo_documento, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.direccion, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.direccion, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.direccion, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.numero, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.numero, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.numero, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.tipo_instructor, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.tipo_instructor, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.tipo_instructor, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ficha_id, "Ficha", htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownList("ficha_id", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ficha_id, "", new { @class = "text-danger" })
                    </div>

                    <button type="submit" class="btn btn-primary">Crear</button>
                </div>
            </div>
        }
    </div>

    <div class="container mt-3">
        @Html.ActionLink("Volver a la lista", "Index", null, new { @class = "btn btn-secondary" })
    </div>
    <script>
        document.getElementById('imagenn').addEventListener('change', function (event) {
            var input = event.target;
            var vistaPrevia = document.getElementById('vistaPreviaImagen');
            var hiddenImagen = document.querySelector('input[name="imagen"]');

            if (input.files && input.files[0]) {
                var lector = new FileReader();

                lector.onload = function (e) {
                    vistaPrevia.src = e.target.result;
                    vistaPrevia.style.display = 'block';

                    const commaIndex = e.target.result.indexOf(',');
                    if (commaIndex !== -1) {
                        hiddenImagen.value = e.target.result.slice(commaIndex + 1);
                    } else {
                        hiddenImagen.value = e.target.result;
                    }
                };

                lector.readAsDataURL(input.files[0]);
            }
        });
    </script>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
